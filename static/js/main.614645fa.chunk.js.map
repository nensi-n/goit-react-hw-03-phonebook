{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","App.js","utils/filter.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmite","preventDefault","props","onSubmite","id","onSubmit","this","className","type","pattern","title","required","onChange","React","Component","ContactList","contacts","onDelete","map","contact","onClick","Container","children","Filter","App","filter","handleSubmiteForme","some","alert","prevState","shortid","generate","removeContact","handleChangeFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","toLowerCase","includes","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.614645fa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../ContactForm/ContactForm.css\";\r\n\r\nclass ContactForm extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmite = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmite(this.state);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"contact\" onSubmit={this.handleSubmite}>\r\n        <label>\r\n          <p>Name:</p>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Number:</p>\r\n          <input\r\n            className=\"input-field\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"submit-button\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import T from \"prop-types\";\r\nimport \"../ContactList/ContactList.css\";\r\n\r\nfunction ContactList({ contacts, onDelete }) {\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          <p>Name: {contact.name}</p>\r\n          <p>Number: {contact.number}</p>\r\n          <button type=\"button\" onClick={() => onDelete(contact.id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: T.arrayOf(\r\n    T.shape({\r\n      id: T.string.isRequired,\r\n      name: T.string.isRequired,\r\n      number: T.string.isRequired,\r\n    })\r\n  ),\r\n  onDelete: T.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import T from \"prop-types\";\r\nimport \"../Container/Container.css\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: T.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import T from \"prop-types\";\r\nimport \"../Filter/Filter.css\";\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return <input type=\"text\" name=\"filter\" onChange={onChange} value={value} />;\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: T.string,\r\n  onChange: T.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport Container from \"./components/Container/Container\";\r\nimport shortid from \"shortid\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport contactFilter from \"./utils/filter\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    contacts: [\r\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n    ],\r\n    filter: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const contacts = localStorage.getItem(\"contacts\");\r\n    const parsedContacts = JSON.parse(contacts);\r\n\r\n    if (parsedContacts) {\r\n      this.setState({ contacts: parsedContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const nextContacts = this.state.contacts;\r\n    const prevContacts = prevState.contacts;\r\n\r\n    if (nextContacts !== prevContacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\r\n    }\r\n  }\r\n\r\n  handleSubmiteForme = (contact) => {\r\n    this.state.contacts.some(({ name }) => name === contact.name)\r\n      ? alert(\"Contact alredy exists\")\r\n      : this.setState((prevState) => ({\r\n          contacts: [\r\n            ...prevState.contacts,\r\n            { id: shortid.generate(), ...contact },\r\n          ],\r\n        }));\r\n  };\r\n\r\n  removeContact = (id) => {\r\n    this.setState((prevState) => ({\r\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\r\n    }));\r\n  };\r\n\r\n  handleChangeFilter = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmite={this.handleSubmiteForme} />\r\n        <h2>Contacts</h2>\r\n        <Filter value={this.state.filter} onChange={this.handleChangeFilter} />\r\n        <ContactList\r\n          onDelete={this.removeContact}\r\n          contacts={contactFilter(this.state.contacts, this.state.filter)}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export default function contactFilter(contacts, filter) {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.trim().toLowerCase())\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}